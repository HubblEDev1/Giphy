{"version":3,"sources":["components/AddCategory.js","helpers/giphy-request.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GiftExpertApp.js","index.js"],"names":["AddCategory","setCategory","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","placeholder","type","value","onChange","target","prototype","PropTypes","func","isRequired","GiphyRequest","category","a","fetch","encodeURI","request","json","data","gifs","map","img","id","title","url","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","setTimeout","useFetchGifs","dataImage","GiftExpertApp","categories","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mMAGaA,EAAc,SAAC,GAAmB,IAAlBC,EAAiB,EAAjBA,YAAiB,EACNC,mBAAS,IADH,mBACnCC,EADmC,KACvBC,EADuB,KAgB1C,OACI,sBAAMC,SATW,SAACC,GAClBA,EAAEC,iBACCJ,EAAWK,OAAOC,OAAS,IAC1BR,GAAY,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OACpCN,EAAc,MAKlB,SACI,uBACIO,YAAY,SACZC,KAAO,OACPC,MAASV,EACTW,SAnBc,SAACR,GAEvBF,EAAeE,EAAES,OAAOF,aAuBhCb,EAAYgB,UAAY,CACpBf,YAAagB,IAAUC,KAAKC,Y,mCChCnBC,EAAY,uCAAG,WAAOC,GAAP,qBAAAC,EAAA,4DAGT,mCAHS,SAIFC,MAAM,gDAAD,OADZ,mCACY,cAA6DC,UAAUH,GAAvE,cAJH,cAIlBI,EAJkB,gBAKHA,EAAQC,OALL,uBAKjBC,EALiB,EAKjBA,KAEDC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EACzB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXC,IAAG,UAAEH,EAAII,cAAN,aAAE,EAAYC,iBAAiBF,QAXlB,kBAejBL,GAfiB,4CAAH,sDCEZQ,EAAc,SAAC,GAAkB,IAAjBJ,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,IAChC,OACI,sBAAKI,UAAU,6CAAf,UACI,qBAAKC,IAAKL,EAAKM,IAAKP,IACpB,4BAAIA,QCAHQ,EAAU,SAAC,GAAgB,IAAfnB,EAAc,EAAdA,SAAc,ECFX,SAACA,GAAc,IAAD,EACZnB,mBAAS,CAC/ByB,KAAM,GACNc,SAAS,IAHyB,mBAC/BC,EAD+B,KACxBC,EADwB,KAmBtC,OAZAC,qBAAU,WACNxB,EAAaC,GAAUwB,MAAK,SAAAX,GACxBY,YAAW,WACPH,EAAS,CACLhB,KAAMO,EACNO,SAAS,MAEd,UAER,CAACpB,IAGGqB,EDfyBK,CAAa1B,GAAhCa,EAFsB,EAE5BP,KAAcc,EAFc,EAEdA,QAWrB,OACI,qCACI,6BAAKpB,IACD,mBAAGgB,UAAU,mCAAb,SAAiDI,GAAW,eAC5D,qBAAKJ,UAAU,2BAAf,SAMQH,EAAOL,KAAI,SAAAmB,GAAS,OACpB,cAAC,EAAD,eAEQA,GADCA,EAAUjB,aE1B9BkB,EAAgB,WAAM,MAEG/C,mBAAS,CAAC,UAFb,mBAExBgD,EAFwB,KAEZjD,EAFY,KAS/B,OACI,qCACI,oBAAIoC,UAAU,qCAAd,8BACA,uBAEA,cAAC,EAAD,CACIpC,YAAaA,IAEjB,6BAOIiD,EAAWrB,KAAI,SAAAR,GAAQ,OACnB,cAAC,EAAD,CAEIA,SAAYA,GADPA,QAMjB,qD,MC/BZ8B,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.74cdb416.chunk.js","sourcesContent":["import React, {useState} from 'react';\nimport PropTypes from 'prop-types';\n\nexport const AddCategory = ({setCategory}) => {\n    const [inputValue, setInputValue] = useState('');\n\n    const handleInputChange = (e) => {\n        //console.log(e);\n        setInputValue( e.target.value );\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault();// method tells the user agent that if the event does not get explicitly handled, its default action should not be taken as it normally would be.\n        if(inputValue.trim().length > 2){\n            setCategory(cats => [inputValue, ...cats ]);\n            setInputValue('')\n        }\n    }\n\n    return(\n        <form onSubmit={handleSubmit}>\n            <input \n                placeholder='Search'\n                type = \"text\"\n                value = {inputValue}\n                onChange = {handleInputChange} \n            />\n        </form>\n    )\n}\n\nAddCategory.prototype = {\n    setCategory: PropTypes.func.isRequired\n}\n\n\n\n\n","export const GiphyRequest = async (category) => {\n    //F1xbfXQYRd4TbQFHl9rwkVJjsAU4ANxK\n    //api.giphy.com/v1/gifs/search?api_key=F1xbfXQYRd4TbQFHl9rwkVJjsAU4ANxK&q=car\n    const apiKey = 'F1xbfXQYRd4TbQFHl9rwkVJjsAU4ANxK';\n    const request = await fetch(`https://api.giphy.com/v1/gifs/search?api_key=${apiKey}&q=${encodeURI(category)}&limit=20`);//encodeURI allow us to trim\n    const {data} = await request.json();\n    \n    const gifs = data.map(img => {\n        return {\n            id: img.id,\n            title: img.title,\n            url: img.images?.downsized_medium.url\n        }\n    })\n\n    return gifs;\n\n}\n\n","import React from 'react';\n\nexport const GifGridItem = ({title, url}) => {\n    return(\n        <div className=\"card animate__animated animate__fadeInDown\">\n            <img src={url} alt={title}/>\n            <p>{title}</p>\n        </div>\n    )\n}   ","import React from 'react'\nimport { useFetchGifs } from '../hooks/useFetchGifs'\n//import { GiphyRequest } from '../helpers/giphy-request';\nimport { GifGridItem } from './GifGridItem';\n//import { GiphyRequest } from '../data/giphy-request'\n\nexport const GifGrid = ({category}) => {\n\n    const {data: images, loading} = useFetchGifs(category);\n    /*const [images, setImages] = useState([]);\n\n\n    useEffect(() => {\n        GiphyRequest(category).then(image => setImages(image));\n    }, [category])//EL segundo parametro es un arreglo de dependencias\n            //si lo dejamos vacio el componente solo ejecuta la\n            //instrucci贸n GiphyRequest una s贸la vez\n    console.log(images);\n */\n    return (\n        <>\n            <h3>{category}</h3>    \n                <p className=\"animate__animated animate__swing\">{loading && 'Loading...'}</p>\n                <div className=\"card-grid animate__swing\">\n            \n                    {\n                        /*images.map(dataImage => {\n                            return <li key={dataImage.id}>{dataImage.id}</li>\n                        })*/\n                        images.map(dataImage => \n                        <GifGridItem\n                            key={dataImage.id}\n                            {...dataImage}\n                        />)\n                    }\n            </div>\n        </>\n    )\n}\n","import { useEffect, useState } from \"react\";\nimport { GiphyRequest } from \"../helpers/giphy-request\";\n\n//- Un hook puede tener estado\nexport const useFetchGifs = (category) => {\n    const [state, setState] = useState({\n        data: [],\n        loading: true\n    });\n\n\n    useEffect(() => {\n        GiphyRequest(category).then(images => {\n            setTimeout(() => {\n                setState({\n                    data: images,\n                    loading: false\n                })\n            }, 500);\n        });\n    }, [category]);//EL segundo parametro es un arreglo de dependencias\n            //si lo dejamos vacio el componente solo ejecuta la\n            //instrucci贸n GiphyRequest una s贸la vez\n    return state;\n\n}","import React, {useState} from 'react';\nimport { AddCategory } from './components/AddCategory';\nimport { GifGrid } from './components/GifGrid';\n//import { GiphyRequest } from '../data/giphy-request';\n\nexport const GiftExpertApp = () => {\n    //const categories = ['BMW', 'Audi', 'Code'];\n    const [categories, setCategory] = useState(['Space']);\n    /*\n    const handleAdd = () => {\n        setCategory([...categories, 'IBM']);//Mantenemos los elementos anteriores y agregamos uno\n        //setCategory((elem) => [...categories, 'IBM']);//Mantenemos los elementos anteriores y agregamos uno\n    }*/\n\n    return(\n        <>\n            <h2 className=\"animate__animated animate__flipInX\">Testing GiphyApi</h2>\n            <hr/>\n            {/*<button onClick={handleAdd}>Add</button>*/}\n            <AddCategory \n                setCategory={setCategory}\n            />\n            <ol>\n            {\n                /*\n                categories.map((category) => { \n                    return <li key={category}>{category}</li>//Es importante mantener una key unica\n                })\n                */\n                categories.map(category => (\n                    <GifGrid \n                        key={category}\n                        category = {category}\n                    />\n                ))\n            }\n            </ol>\n            <footer>@eadev 2021</footer>\n        </>\n    )\n};\n\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GiftExpertApp } from './GiftExpertApp';\nimport './index.css';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <GiftExpertApp />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n"],"sourceRoot":""}